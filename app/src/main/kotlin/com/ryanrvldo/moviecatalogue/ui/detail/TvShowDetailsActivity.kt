package com.ryanrvldo.moviecatalogue.ui.detailimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.view.Menuimport android.view.MenuItemimport android.view.Viewimport android.widget.ImageViewimport android.widget.TextViewimport android.widget.Toastimport androidx.activity.viewModelsimport androidx.core.content.ContextCompatimport com.bumptech.glide.Glideimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptionsimport com.bumptech.glide.request.RequestOptionsimport com.google.android.material.appbar.AppBarLayoutimport com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListenerimport com.google.android.material.snackbar.Snackbarimport com.ryanrvldo.moviecatalogue.BuildConfigimport com.ryanrvldo.moviecatalogue.Rimport com.ryanrvldo.moviecatalogue.adapter.BackdropSlideAdapterimport com.ryanrvldo.moviecatalogue.adapter.CastAdapterimport com.ryanrvldo.moviecatalogue.adapter.SimilarAdapterimport com.ryanrvldo.moviecatalogue.data.model.*import com.ryanrvldo.moviecatalogue.data.remote.response.VideosResponseimport com.ryanrvldo.moviecatalogue.data.vo.Statusimport com.ryanrvldo.moviecatalogue.databinding.ActivityTvDetailBindingimport com.ryanrvldo.moviecatalogue.di.TvShowQualifierimport com.ryanrvldo.moviecatalogue.ui.viewmodel.SeasonsViewModel.Companion.SEASONS_KEYimport com.ryanrvldo.moviecatalogue.ui.viewmodel.SeasonsViewModel.Companion.TV_ID_KEYimport com.ryanrvldo.moviecatalogue.ui.viewmodel.TvShowDetailsViewModelimport com.ryanrvldo.moviecatalogue.utils.BaseAppCompatActivityimport com.ryanrvldo.moviecatalogue.utils.LayoutManagerUtil.getHorizontalLayoutManagerimport com.ryanrvldo.moviecatalogue.utils.StringUtils.getGenresimport com.smarteist.autoimageslider.SliderAnimationsimport dagger.hilt.android.AndroidEntryPointimport java.util.*import javax.inject.Inject@AndroidEntryPointclass TvShowDetailsActivity : BaseAppCompatActivity() {    private lateinit var binding: ActivityTvDetailBinding    private val viewModel: TvShowDetailsViewModel by viewModels()    @Inject    lateinit var castAdapter: CastAdapter    @TvShowQualifier    @Inject    lateinit var similarAdapter: SimilarAdapter    private lateinit var tvShow: TvShow    private var favorite = false    private lateinit var msg: String    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = ActivityTvDetailBinding.inflate(layoutInflater)        setContentView(binding.root)        showLoading(true)        setupToolbar()        setupRecyclerViews()        observeData()    }    override fun onCreateOptionsMenu(menu: Menu): Boolean {        menuInflater.inflate(R.menu.details_menu, menu)        super.onCreateOptionsMenu(menu)        return true    }    override fun onPrepareOptionsMenu(menu: Menu): Boolean {        if (favorite) {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite)        } else {            menu.findItem(R.id.favorite).setIcon(R.drawable.ic_favorite_border)        }        super.onPrepareOptionsMenu(menu)        return true    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        if (item.itemId == R.id.favorite) {            if (favorite) {                deleteFavorite(item)            } else {                addFavorite(item)            }        }        return super.onOptionsItemSelected(item)    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return true    }    private fun setupToolbar() {        setSupportActionBar(binding.toolbarDetail)        supportActionBar?.setDisplayHomeAsUpEnabled(true)        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_back_dark)        binding.appBar.addOnOffsetChangedListener(object : OnOffsetChangedListener {            var isShow = true            var scrollRange = -1            override fun onOffsetChanged(                appBarLayout: AppBarLayout,                verticalOffset: Int            ) {                if (scrollRange == -1) {                    scrollRange = appBarLayout.totalScrollRange                }                if (scrollRange + verticalOffset == 0) {                    binding.collapsingToolbar.title = tvShow.title                    binding.cardBanner.visibility = View.GONE                    isShow = true                } else if (isShow) {                    binding.collapsingToolbar.title = " "                    binding.cardBanner.visibility = View.VISIBLE                    isShow = false                }            }        })    }    private fun setupRecyclerViews() {        binding.castRv.layoutManager = getHorizontalLayoutManager(this)        binding.castRv.adapter = castAdapter        binding.similarRv.layoutManager = getHorizontalLayoutManager(this)        binding.similarRv.adapter = similarAdapter    }    private fun observeData() {        viewModel.tvShow.observe(this, { resource ->            when (resource.status) {                Status.SUCCESS -> {                    resource.data?.let { tvShow ->                        setShowDetail(tvShow)                        setContentRating(tvShow.contentRatingResponse?.results!!)                        setBackdropsSlider(tvShow.images?.backdrops!!)                        setShowVideos(tvShow.videos)                        setSeasons(tvShow.seasons!!)                        setCastList(tvShow.credits?.cast!!)                        setSimilarList(tvShow.similar?.similar!!)                        showLoading(false)                    }                }                Status.ERROR -> {                    Toast.makeText(this, resource.message, Toast.LENGTH_SHORT).show()                    showLoading(false)                }                Status.LOADING -> showLoading(true)            }        })        viewModel.isFavorites.observe(this) {            if (it) {                favorite = true                invalidateOptionsMenu()            }        }    }    private fun setShowDetail(tvShow: TvShow) {        this.tvShow = tvShow        binding.tvDetailsTitle.text = tvShow.title        binding.tvDetailsOverview.text = tvShow.overview        binding.ratingText.text = tvShow.rating.toString()        binding.ratingCount.text = String.format(            Locale.US,            "%,d",            tvShow.ratingVotes        )        binding.tvDetailsGenres.text = getGenres(tvShow.genres!!)        binding.tvDetailsReleaseDate.text = tvShow.releaseDate        Glide.with(this)            .load(BuildConfig.TMDB_IMAGE_342 + tvShow.posterPath)            .error(R.drawable.ic_undraw_404)            .apply(RequestOptions.placeholderOf(R.drawable.ic_undraw_images).centerCrop())            .transition(DrawableTransitionOptions.withCrossFade())            .into(binding.tvDetailsPoster)    }    private fun setContentRating(results: List<ContentRating>) {        if (results.isNotEmpty()) {            val (_, rating) = results[0]            binding.tvContentRating.text = rating        }    }    private fun setBackdropsSlider(imageItems: List<Image>) {        binding.imageSlider.setSliderAdapter(BackdropSlideAdapter(imageItems))        binding.imageSlider.setSliderTransformAnimation(SliderAnimations.FADETRANSFORMATION)        binding.imageSlider.setIndicatorVisibility(false)    }    private fun setShowVideos(videosResponse: VideosResponse?) {        binding.tvTrailers.removeAllViews()        if (videosResponse != null) {            if (videosResponse.videos.isEmpty()) {                binding.trailersLabel.visibility = View.GONE                binding.tvTrailers.visibility = View.GONE            } else {                for ((key, name) in videosResponse.videos) {                    val parent = layoutInflater.inflate(                        R.layout.item_trailer,                        binding.tvTrailers,                        false                    )                    val thumbnail =                        parent.findViewById<ImageView>(R.id.thumbnail_trailer)                    val tvTrailerTitle = parent.findViewById<TextView>(R.id.trailerTitle)                    tvTrailerTitle.text = name                    Glide.with(this)                        .load(                            String.format(                                BuildConfig.YOUTUBE_THUMBNAIL_URL,                                key                            )                        )                        .error(R.drawable.ic_undraw_404)                        .apply(RequestOptions.placeholderOf(R.color.colorPrimary).centerCrop())                        .into(thumbnail)                    thumbnail.requestLayout()                    thumbnail.setOnClickListener {                        startActivity(                            Intent(                                Intent.ACTION_VIEW,                                Uri.parse(String.format(BuildConfig.YOUTUBE_VIDEO_URL, key))                            )                        )                    }                    binding.tvTrailers.addView(parent)                }            }        } else {            showError()            binding.trailersLabel.visibility = View.GONE            binding.tvTrailers.visibility = View.GONE        }    }    private fun setSeasons(seasonList: List<Season>) {        binding.tvSeasons.removeAllViews()        for (season in seasonList) {            val parent = layoutInflater.inflate(                R.layout.item_season, binding.tvSeasons, false            )            val imageSeason: ImageView = parent.findViewById(R.id.season_poster)            val seasonTitle: TextView = parent.findViewById(R.id.season_name)            seasonTitle.text = season.name            imageSeason.requestLayout()            imageSeason.setOnClickListener {                val intent = Intent(this@TvShowDetailsActivity, SeasonsActivity::class.java)                intent.putExtra(TV_ID_KEY, tvShow.id)                intent.putExtra(SEASONS_KEY, season.number)                startActivity(intent)            }            Glide.with(this)                .load(BuildConfig.TMDB_IMAGE_BASE_URL + season.posterPath)                .error(R.drawable.ic_undraw_404)                .apply(RequestOptions.placeholderOf(R.drawable.ic_undraw_images).centerCrop())                .into(imageSeason)            binding.tvSeasons.addView(parent)        }    }    private fun setCastList(castList: List<Cast>) {        if (castList.isNotEmpty()) {            castAdapter.differ.submitList(castList)        } else {            binding.castLabel.visibility = View.GONE            binding.castRv.visibility = View.GONE        }    }    private fun setSimilarList(similarList: List<Similar>) {        if (similarList.isNotEmpty()) {            similarAdapter.setSimilarList(similarList)        } else {            binding.similarLabel.visibility = View.GONE            binding.similarRv.visibility = View.GONE        }    }    private fun showLoading(state: Boolean) {        if (state) {            binding.backgroundLoading.visibility = View.VISIBLE            binding.progressBar.visibility = View.VISIBLE            binding.appBar.visibility = View.GONE            binding.constraint.visibility = View.GONE        } else {            binding.backgroundLoading.visibility = View.GONE            binding.progressBar.visibility = View.GONE            binding.appBar.visibility = View.VISIBLE            binding.constraint.visibility = View.VISIBLE        }    }    private fun showError() {        Toast.makeText(this, "Check your internet connection.", Toast.LENGTH_SHORT).show()    }    private fun addFavorite(item: MenuItem) {        viewModel.addFavoriteTvShow(tvShow)        favorite = true        item.setIcon(R.drawable.ic_favorite)        msg = tvShow.title + " " + getString(R.string.add_favorite_tv)        val snackbar = Snackbar.make(binding.root, msg, Snackbar.LENGTH_LONG)            .setAction(R.string.undo) {                deleteFavorite(item)                msg = tvShow.title + " " + getString(R.string.delete_favorite_tv)                val snackbarUndo =                    Snackbar.make(binding.root, msg, Snackbar.LENGTH_SHORT)                        .setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))                        .setBackgroundTint(ContextCompat.getColor(this, R.color.colorWhite))                        .setActionTextColor(ContextCompat.getColor(this, R.color.colorPrimaryLight))                snackbarUndo.show()            }            .setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))            .setBackgroundTint(ContextCompat.getColor(this, R.color.colorWhite))            .setActionTextColor(ContextCompat.getColor(this, R.color.colorPrimaryLight))        snackbar.show()    }    private fun deleteFavorite(item: MenuItem) {        viewModel.removeFavoriteTvShow(tvShow)        favorite = false        item.setIcon(R.drawable.ic_favorite_border)        msg = tvShow.title + " " + getString(R.string.delete_favorite_tv)        val snackbar = Snackbar.make(binding.root, msg, Snackbar.LENGTH_LONG)            .setAction(                R.string.undo            ) {                addFavorite(item)                msg = tvShow.title + " " + getString(R.string.add_favorite_tv)                val snackbarUndo =                    Snackbar.make(binding.root, msg, Snackbar.LENGTH_SHORT)                        .setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))                        .setBackgroundTint(ContextCompat.getColor(this, R.color.colorWhite))                        .setActionTextColor(ContextCompat.getColor(this, R.color.colorPrimaryLight))                snackbarUndo.show()            }            .setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))            .setBackgroundTint(ContextCompat.getColor(this, R.color.colorWhite))            .setActionTextColor(ContextCompat.getColor(this, R.color.colorPrimaryLight))        snackbar.show()    }}